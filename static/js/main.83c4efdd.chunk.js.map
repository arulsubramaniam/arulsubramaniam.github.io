{"version":3,"sources":["components/Home.js","components/Profile.js","components/Nav.js","auth/Auth.js","components/Callback.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","_this$props$auth","this","props","auth","isAuthenticated","login","react_default","a","createElement","Link","to","onClick","Component","Profile","state","profile","error","loadUserProfile","_this2","getProfile","setState","Fragment","nickname","JSON","stringify","Nav","logout","Auth","history","_this","Object","classCallCheck","auth0","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","push","alert","concat","console","log","expiresAt","expiresIn","Date","getTime","localStorage","setItem","removeItem","userProfile","clientID","process","returnTo","getAccessToken","getItem","Error","cb","client","userInfo","WebAuth","domain","redirectUri","responseType","scope","parse","Callback","test","location","hash","App","possibleConstructorReturn","getPrototypeOf","call","components_Nav","className","Route","path","exact","render","components_Home","assign","components_Callback","components_Profile","Redirect","Boolean","window","hostname","match","ReactDOM","BrowserRouter","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83c4efdd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    const { isAuthenticated, login } = this.props.auth;\r\n    return (\r\n      <div>\r\n        <h1>Home</h1>\r\n        {isAuthenticated() ?\r\n          (<Link to=\"/profile\">View Profile</Link>)\r\n          : (<button onClick={login}>Login</button>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    profile: null,\r\n    error: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadUserProfile();\r\n  }\r\n\r\n  loadUserProfile() {\r\n    this.props.auth.getProfile((profile, error) => {\r\n      this.setState({ profile, error });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { profile } = this.state;\r\n    if (!profile) return null;\r\n    return <>\r\n      <h1>Profile</h1>\r\n      <p>{profile.nickname}</p>\r\n      <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    const { isAuthenticated, login, logout } = this.props.auth;\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/profile\">Profile</Link>\r\n          </li>\r\n          <li>\r\n            <button onClick={isAuthenticated() ? logout : login}>\r\n              {isAuthenticated() ? \"Logout\" : \"Login\"}\r\n            </button>\r\n\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import auth0 from \"auth0-js\";\r\n\r\nexport default class Auth {\r\n  constructor(history) {\r\n    this.history = history;\r\n    this.userProfile = null;\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: process.env.REACT_APP_AUTH0_DOMAIN,\r\n      clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\r\n      redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\r\n      responseType: \"token id_token\",\r\n      scope: \"openid profile email\"\r\n    });\r\n  }\r\n\r\n  login = () => {\r\n    this.auth0.authorize();\r\n  };\r\n\r\n  handleAuthentication = () => {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        this.history.push(\"/\");\r\n      } else if (err) {\r\n        this.history.push(\"/\");\r\n        alert(`Error: ${err.error}. Check console.`);\r\n        console.log(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  setSession = authResult => {\r\n    const expiresAt = JSON.stringify(\r\n      authResult.expiresIn * 1000 + new Date().getTime()\r\n    );\r\n    localStorage.setItem(\"expires_at\", expiresAt);\r\n    localStorage.setItem(\"id_token\", authResult.idToken);\r\n    localStorage.setItem(\"access_token\", authResult.accessToken);\r\n  };\r\n\r\n  isAuthenticated() {\r\n    const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.removeItem(\"expires_at\");\r\n    localStorage.removeItem(\"id_token\");\r\n    localStorage.removeItem(\"access_token\");\r\n    this.userProfile = null;\r\n    this.auth0.logout({\r\n      clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\r\n      returnTo: \"http://localhost:3000\"\r\n    });\r\n  }\r\n\r\n  getAccessToken = () => {\r\n    const accessToken = localStorage.getItem(\"access_token\");\r\n    if (!accessToken) {\r\n      throw new Error(\"No access token found.\");\r\n    }\r\n    return accessToken;\r\n  };\r\n\r\n  getProfile = cb => {\r\n    if (this.userProfile) return cb(this.userProfile);\r\n    this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\r\n      if (profile) this.userProfile = profile;\r\n      cb(profile, err);\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Callback extends Component {\r\n  componentDidMount() {\r\n    if (/access_token|id_token|error/.test(this.props.location.hash)) {\r\n      this.props.auth.handleAuthentication();\r\n    } else {\r\n      throw new Error(\"Invalid callback URL.\");\r\n    }\r\n  }\r\n  render() {\r\n    return <h1>Loading... </h1>;\r\n  }\r\n}\r\n\r\nexport default Callback;\r\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Profile from \"./Profile\";\nimport Nav from \"./Nav\";\nimport Auth from \"../auth/Auth\";\nimport Callback from \"./Callback\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.auth = new Auth(this.props.history);\n  }\n  render() {\n    return (\n      <>\n        <Nav auth={this.auth} />\n        <div className=\"body\">\n          <Route\n            path=\"/\"\n            exact\n            render={props => <Home auth={this.auth} {...props} />}\n          />\n          <Route\n            path=\"/callback\"\n            render={props => <Callback auth={this.auth} {...props} />}\n          />\n          <Route\n            path=\"/profile\"\n            render={props => this.auth.isAuthenticated() ? <Profile auth={this.auth} {...props} /> : <Redirect to=\"/\" />}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}