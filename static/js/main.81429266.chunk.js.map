{"version":3,"sources":["components/Home.js","components/Profile.js","components/Nav.js","auth/Auth.js","components/Callback.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","onClick","this","props","auth","login","Component","Profile","Nav","Link","to","Auth","history","_this","Object","classCallCheck","auth0","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","push","alert","concat","error","console","log","expiresAt","JSON","stringify","expiresIn","Date","toTimeString","localStorage","setItem","WebAuth","domain","process","clientID","redirectUri","responseType","scope","Callback","test","location","hash","Error","App","possibleConstructorReturn","getPrototypeOf","call","_this2","Fragment","components_Nav","className","Route","path","exact","render","components_Home","assign","components_Callback","component","Boolean","window","hostname","match","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81429266.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Home</h1>\r\n        <button onClick={this.props.auth.login}>Login</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Profile extends Component {\r\n  render() {\r\n    return <h1>Profile</h1>;\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/profile\">Profile</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import auth0 from \"auth0-js\";\r\n\r\nexport default class Auth {\r\n  constructor(history) {\r\n    this.history = history;\r\n    this.auth0 = new auth0.WebAuth({\r\n      domain: process.env.REACT_APP_AUTH0_DOMAIN,\r\n      clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\r\n      redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\r\n      responseType: \"token id_token\",\r\n      scope: \"openid profile email\"\r\n    });\r\n  }\r\n\r\n  login = () => {\r\n    this.auth0.authorize();\r\n  };\r\n\r\n  handleAuthentication = () => {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        this.history.push(\"/\");\r\n      } else if (err) {\r\n        this.history.push(\"/\");\r\n        alert(`Error: ${err.error}. Check console.`);\r\n        console.log(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  setSession = authResult => {\r\n    const expiresAt = JSON.stringify(\r\n      authResult.expiresIn * 1000 + new Date().toTimeString()\r\n    );\r\n    localStorage.setItem(\"expires_at\", expiresAt);\r\n    localStorage.setItem(\"id_token\", authResult.idToken);\r\n    localStorage.setItem(\"access_token\", authResult.accessToken);\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Callback extends Component {\r\n  componentDidMount() {\r\n    if (/access_token|id_token|error/.test(this, this.props.location.hash)) {\r\n      this.props.auth.handleAuthentication();\r\n    } else {\r\n      throw new Error(\"Invalid callback URL.\");\r\n    }\r\n  }\r\n  render() {\r\n    return <h1>Loading... </h1>;\r\n  }\r\n}\r\n\r\nexport default Callback;\r\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Profile from \"./Profile\";\nimport Nav from \"./Nav\";\nimport Auth from \"../auth/Auth\";\nimport Callback from \"./Callback\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.auth = new Auth(this.props.history);\n  }\n  render() {\n    return (\n      <>\n        <Nav />\n        <div className=\"body\">\n          <Route\n            path=\"/\"\n            exact\n            render={props => <Home auth={this.auth} {...props} />}\n          />\n          <Route\n            path=\"/callback\"\n            exact\n            render={props => <Callback auth={this.auth} {...props} />}\n          />\n          <Route path=\"/profile\" component={Profile} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}